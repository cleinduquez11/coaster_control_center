import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';

class PresentationLandingPage extends StatefulWidget {
  const PresentationLandingPage({Key? key}) : super(key: key);

  @override
  State<PresentationLandingPage> createState() =>
      _PresentationLandingPageState();
}

class _PresentationLandingPageState extends State<PresentationLandingPage>
    with TickerProviderStateMixin {
  late final MapController _mapController;

  final List<Widget> _presentations = [
    Center(
      child: Column(
        // crossAxisAlignment: CrossAxisAlignment.end,
        // mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Hero(
            tag: 'coaster',
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Colors.lightGreen,
                    Colors.green.shade900,
                    Colors.green.shade400,
                    Colors.lightGreen,
                  ],
                ),
              ),
              child: const Text(
                 'Storm Surge Identification',
                style: TextStyle(
                  fontSize: 48.0,
                  color: Colors.white,
                  fontWeight: FontWeight.w700,
                ),
              ),
            ),
          ),
          const SizedBox(height: 50),
          DefaultTextStyle(
            style: const TextStyle(
              fontSize: 20.0,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
            child: AnimatedTextKit(
              animatedTexts: [
                TypewriterAnimatedText(
                  """Coastal Engineering\nManagement Research\nand Development Center""",
                  speed: const Duration(milliseconds: 100),
                ),
              ],
              totalRepeatCount: 1,
              pause: const Duration(milliseconds: 1000),
              displayFullTextOnTap: true,
              stopPauseOnTap: true,
            ),
          ),
        ],
      ),
    ),

Center(
  child: Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      const Text(
        'What is Storm Surge?',
        style: TextStyle(
          fontSize: 48.0,
          color: Colors.white,
          fontWeight: FontWeight.bold,
        ),
        textAlign: TextAlign.center,
      ),
      const SizedBox(height: 20),
      Card(
        color: Colors.white.withOpacity(0.8), // Transparent white background
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10), // Rounded edges
        ),
        elevation: 2,
        margin: const EdgeInsets.symmetric(horizontal: 16),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            '''A storm surge is an abnormal rise of water generated by a storm, \nover and above the predicted astronomical tides. It can cause\n extensive flooding in coastal areas and pose significant threats \n to life and property.''',
            style: TextStyle(
              fontSize: 37.0,
              color: Colors.black87,
            ),
            textAlign: TextAlign.center,
          ),
        ),
      ),
    ],
  ),
),

     Center(
      
      child: Text(
        "Presentation 2",
        style: TextStyle(
            color: Colors.white, fontSize: 32, fontWeight: FontWeight.bold),
      ),
    ),
    // const Center(
    //   child: Text(
    //     "Presentation 3",
    //     style: TextStyle(
    //         color: Colors.white, fontSize: 32, fontWeight: FontWeight.bold),
    //   ),
    // ),
  ];

  final List<Map<String, dynamic>> _locations = [
    {"latLng": LatLng(12.491167654450596,128.72834570312503), "zoom":7.0},
    {"latLng": LatLng( 15.779705252531222, 118.64959389648442), "zoom": 8.0},
    {"latLng": LatLng(14.5995, 120.9842), "zoom": 12.0},
  ];

  final List<Offset> _presentationPositions = [
    Offset(0.7, 0.3),
    Offset(0.01, 0.01),
    Offset(0.8, 0.4),
  ];

  int _currentIndex = 0;

  @override
  void initState() {
    super.initState();
    _mapController = MapController();
    RawKeyboard.instance.addListener(_handleKeyPress);
  }

  void _animatedMapMove(LatLng destLocation, double destZoom) {
    final camera = _mapController.camera;
    final latTween = Tween<double>(
        begin: camera.center.latitude, end: destLocation.latitude);
    final lngTween = Tween<double>(
        begin: camera.center.longitude, end: destLocation.longitude);
    final zoomTween = Tween<double>(begin: camera.zoom, end: destZoom);

    final controller = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );
    final Animation<double> animation =
        CurvedAnimation(parent: controller, curve: Curves.fastOutSlowIn);

    controller.addListener(() {
      _mapController.move(
        LatLng(latTween.evaluate(animation), lngTween.evaluate(animation)),
        zoomTween.evaluate(animation),
      );
    });

    controller.addStatusListener((status) {
      if (status == AnimationStatus.completed ||
          status == AnimationStatus.dismissed) {
        controller.dispose();
      }
    });

    controller.forward();
  }


 void _onMapEvent(MapEvent event) {
    if (event is MapEventMoveEnd || event is MapEventScrollWheelZoom) {
      final center = _mapController.camera.center;
        final zoom = _mapController.camera.zoom;
      print("Current center: Latitude = ${center.latitude}, Longitude = ${center.longitude}, Zoom Level = $zoom");
    }
  }
  void _handleKeyPress(RawKeyEvent event) {
    if (event is RawKeyDownEvent) {
      if (event.logicalKey == LogicalKeyboardKey.arrowRight) {
        setState(() {
          _currentIndex = (_currentIndex + 1) % _presentations.length;
          _moveToLocation(_currentIndex);
        });
      } else if (event.logicalKey == LogicalKeyboardKey.arrowLeft) {
        setState(() {
          _currentIndex =
              (_currentIndex - 1 + _presentations.length) % _presentations.length;
          _moveToLocation(_currentIndex);
        });
      }
    }
  }

  void _moveToLocation(int index) {
    final location = _locations[index];
    _animatedMapMove(
      location['latLng'] as LatLng,
      location['zoom'] as double,
    );
  }

  @override
  void dispose() {
    RawKeyboard.instance.removeListener(_handleKeyPress);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          FlutterMap(
            mapController: _mapController,
            options: MapOptions(
              center: _locations[0]['latLng'] as LatLng,
              zoom: _locations[0]['zoom'] as double,
             onMapEvent: _onMapEvent, // Listen to map events
              interactiveFlags: InteractiveFlag.all & ~InteractiveFlag.rotate,
            ),
            children: [
              TileLayer(
                urlTemplate:
                    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png',
                userAgentPackageName: 'com.example.app',
              ),
            ],
          ),
          Stack(
            children: _presentations.asMap().entries.map((entry) {
              final index = entry.key;
              final presentation = entry.value;
              final position = _presentationPositions[index];

              return AnimatedPositioned(
                duration: const Duration(milliseconds: 500),
                top: MediaQuery.of(context).size.height * position.dy,
                left: MediaQuery.of(context).size.width * position.dx,
                child: AnimatedOpacity(
                  duration: const Duration(milliseconds: 500),
                  opacity: _currentIndex == index ? 1 : 0,
                  child: presentation,
                ),
              );
            }).toList(),
          ),
          Positioned(
            bottom: 20,
            right: MediaQuery.of(context).size.width * 0.01,
            child: const Text(
              'Â© MMSU coaster 2024 All rights reserved',
              style: TextStyle(
                color: Colors.white,
                fontSize: 12,
              ),
            ),
          ),
        ],
      ),
    );
  }
}
